{% comment %}
Testimonials — grid or slider, supports:
- Metaobject list (preferred): section.settings.mo_list (NB Testimonial)
- All metaobject entries (nb_testimonial) if list empty
- Manual blocks fallback
Cards are rendered by 'nb-testimonial-card' and accept rich-text quotes.
{% endcomment %}

{%- liquid
  assign heading    = section.settings.heading        | default: 'What our clients say'
  assign sub        = section.settings.subheading     | default: '-'
  assign show_sub   = sub != '-' and sub != ''
  assign limit      = section.settings.limit          | default: 12
  assign source     = section.settings.source         | default: 'blocks'
  assign carousel   = section.settings.carousel       | default: false
  assign per_view   = section.settings.per_view       | default: 3
  assign cta_label  = section.settings.cta_label      | default: 'View all'
  assign cta_link   = section.settings.cta_link       | default: '/pages/testimonial'

  assign tag_bucket = ''
-%}

<section id="nb-ts-{{ section.id }}" class="nb-testimonials tone-pebble" style="--nb-per: {{ per_view | default: 3 }};">
  <div class="nb-shell nb-testimonials__container">
    {%- if heading != blank or show_sub -%}
      <header class="nb-testimonials__head">
        {%- if heading != blank -%}
          <h1 class="nb-h2 nb-testimonials__title">{{ heading }}</h1>
        {%- endif -%}
        {%- if show_sub -%}
          <p class="nb-testimonials__dek">{{ sub }}</p>
        {%- endif -%}
      </header>
    {%- endif -%}

    {%- comment -%} Collect entries according to source {%- endcomment -%}
    {%- assign entries = nil -%}
    {%- if source == 'metaobject' -%}
      {%- if section.settings.mo_list and section.settings.mo_list.size > 0 -%}
        {%- assign entries = section.settings.mo_list -%}
      {%- else -%}
        {%- assign mo = shop.metaobjects['nb_testimonial'] -%}
        {%- if mo and mo.values and mo.values.size > 0 -%}
          {%- assign entries = mo.values -%}
        {%- endif -%}
      {%- endif -%}
    {%- endif -%}

    {%- comment -%} Build the cards once {%- endcomment -%}
    {%- capture cards_only -%}
      {%- if entries -%}
        {%- for m in entries limit: limit -%}
          {%- liquid
            assign q   = m.quote
            assign n   = m.name     | default: ''
            assign tt  = m.title    | default: ''
            assign loc = m.location | default: ''
            assign av  = m.avatar
            if m.tags
              assign tg = m.tags | join: ',' 
            else
              assign tg = ''
            endif
          -%}
          {% render 'nb-testimonial-card', quote: q, name: n, title: tt, location: loc, avatar: av, tags: tg %}
        {%- endfor -%}
      {%- else -%}
        {%- for block in section.blocks limit: limit -%}
          {%- assign q   = block.settings.quote    | default: '' -%}
          {%- assign n   = block.settings.name     | default: '' -%}
          {%- assign tt  = block.settings.title    | default: '' -%}
          {%- assign loc = block.settings.location | default: '' -%}
          {%- assign av  = block.settings.avatar -%}
          {%- assign tg  = block.settings.tags     | default: '' -%}
          {% render 'nb-testimonial-card', quote: q, name: n, title: tt, location: loc, avatar: av, tags: tg %}
        {%- endfor -%}
      {%- endif -%}
    {%- endcapture -%}

    {%- comment -%} Chips are kept as-is; filter wiring stays the same {%- endcomment -%}
    {%- if section.settings.show_filter and tag_bucket != blank -%}
      <nav class="nb-tchips" aria-label="Filter testimonials by tag" data-root="{{ section.id }}">
        <ul class="nb-tchips__list" data-chips>
          <li><button type="button" class="nb-chip is-active" data-filter="*">All</button></li>
          {%- assign tmp = tag_bucket | replace: ';', ',' | replace: ', ', ',' | split: ',' | uniq | sort -%}
          {%- for t in tmp -%}
            {%- assign tt = t | strip -%}
            {%- if tt != '' -%}
              <li><button type="button" class="nb-chip" data-filter="{{ tt | handleize }}">{{ tt }}</button></li>
            {%- endif -%}
          {%- endfor -%}
        </ul>
      </nav>
    {%- endif -%}

    {%- comment -%} Render grid or slider {%- endcomment -%}
    {%- if carousel -%}
      <div class="nb-hstrip" data-strip>
        {{ cards_only }}
      </div>

      <div class="nb-hstrip__nav" data-nav hidden>
        <button class="nb-hstrip__btn" type="button" aria-label="Previous" data-prev>‹</button>
        <button class="nb-hstrip__btn" type="button" aria-label="Next" data-next>›</button>
      </div>

      {%- if cta_link != blank -%}
        <div class="nb-hstrip__cta">
          <a class="nb-cta nb-cta--md" href="{{ cta_link }}">{{ cta_label }}</a>
        </div>
      {%- endif -%}
    {%- else -%}
      <div class="nb-tgrid" data-grid>
        {{ cards_only }}
      </div>
    {%- endif -%}
  </div>
</section>

{% javascript %}
(() => {
  const sec = document.getElementById('shopify-section-{{ section.id }}');
  if (!sec) return;

  /* ----- Filter chips (unchanged) ----- */
  const grid  = sec.querySelector('[data-grid], [data-strip]');
  const chips = sec.querySelectorAll('[data-chips] .nb-chip');
  if (grid && chips.length) {
    chips.forEach(chip => {
      chip.addEventListener('click', () => {
        chips.forEach(c => c.classList.remove('is-active'));
        chip.classList.add('is-active');
        const f = chip.getAttribute('data-filter');
        grid.querySelectorAll('.nb-tcard').forEach(card => {
          const ds = (card.getAttribute('data-tags') || '').toLowerCase();
          card.hidden = (f !== '*') && ds.indexOf(f) === -1;
        });
      });
    });
  }

  /* ----- Slider wiring (flex scroller) ----- */
  const strip  = sec.querySelector('[data-strip]');
  if (!strip) return; // not in slider mode

  const prev   = sec.querySelector('[data-prev]');
  const next   = sec.querySelector('[data-next]');
  const nav    = sec.querySelector('[data-nav]');
  if (!prev || !next || !nav) return;

  function updateNav(){
    const overflow = strip.scrollWidth > strip.clientWidth + 2;
    nav.hidden = !overflow;
    // Optional: enable/disable based on scroll position
    prev.disabled = strip.scrollLeft <= 0;
    next.disabled = Math.ceil(strip.scrollLeft + strip.clientWidth) >= strip.scrollWidth;
  }

  function pageWidth(){ return strip.clientWidth; }

  prev.addEventListener('click', () => {
    strip.scrollBy({ left: -pageWidth(), behavior: 'smooth' });
  });
  next.addEventListener('click', () => {
    strip.scrollBy({ left:  pageWidth(), behavior: 'smooth' });
  });

  strip.addEventListener('scroll', () => requestAnimationFrame(updateNav), { passive: true });

  const ro = new ResizeObserver(updateNav);
  ro.observe(strip);
  updateNav();
})();
{% endjavascript %}

{% stylesheet %}
/* Container + header */
.nb-testimonials__container{ max-width: var(--narrow-page-width, 1120px); margin: 0 auto; padding: 0 20px; }
.nb-testimonials__head{ text-align:center; margin: 0 0 clamp(12px, 2vw, 18px); }
.nb-testimonials__title{ margin:0 0 6px; }
.nb-testimonials__dek{ margin:0; color:#54636a; }

/* Standard grid (non-slider) */
.nb-tgrid{ display:grid; gap: clamp(16px, 2.2vw, 26px); align-items: stretch; }
@media (min-width: 960px){ .nb-tgrid{ grid-template-columns: repeat(3, minmax(0,1fr)); } }
@media (min-width: 720px) and (max-width: 959.98px){ .nb-tgrid{ grid-template-columns: repeat(2, minmax(0,1fr)); } }
@media (max-width: 719.98px){ .nb-tgrid{ grid-template-columns: 1fr; } }

/* FLEX slider strip */
#nb-ts-{{ section.id }} .nb-hstrip{
  display:flex;
  gap: 18px;
  overflow-x: auto;
  scroll-snap-type: x mandatory;
  padding: 4px 4px 8px;
  -webkit-overflow-scrolling: touch;
}
#nb-ts-{{ section.id }} .nb-hstrip .nb-tcard{
  flex: 0 0 calc(100% / var(--nb-per, 3)); /* 3 up on desktop by default */
  scroll-snap-align: start;
}

/* On small viewports: bigger cards (1–2 up) */
@media (max-width: 1023.98px){
  #nb-ts-{{ section.id }} .nb-hstrip .nb-tcard{ flex-basis: 48%; }
}
@media (max-width: 739.98px){
  #nb-ts-{{ section.id }} .nb-hstrip .nb-tcard{ flex-basis: 88%; }
}

/* Nav + CTA */
#nb-ts-{{ section.id }} .nb-hstrip__nav{
  display:flex; align-items:center; justify-content:center; gap:14px; margin:12px 0 0;
}
#nb-ts-{{ section.id }} .nb-hstrip__btn{
  width:42px; height:42px; border-radius:999px;
  border:1px solid rgba(0,0,0,.08); background:#fff;
  box-shadow:0 8px 18px rgba(0,0,0,.08);
  font-size:22px; line-height:1; cursor:pointer;
}
#nb-ts-{{ section.id }} .nb-hstrip__btn[disabled]{ opacity:.4; cursor:not-allowed; }
#nb-ts-{{ section.id }} .nb-hstrip__cta{ display:flex; justify-content:center; margin:16px 0 0; }

/* Make CTA teal */
#nb-ts-{{ section.id }} .nb-hstrip__cta .nb-cta{
  background: var(--nb_teal, #0C8A7B) !important;
  color:#fff !important;
  border-color: transparent !important;
}
#nb-ts-{{ section.id }} .nb-hstrip__cta .nb-cta:hover{
  background: color-mix(in oklab, var(--nb_teal, #0C8A7B), #000 8%) !important;
}

/* Card styling (as before) */
.nb-tcard{
  --t-quote-lines: 10;
  position:relative; background:#fff; border:1px solid #e8ecef; border-radius:18px;
  box-shadow:0 10px 22px rgba(0,0,0,.06);
  padding: clamp(18px, 2.2vw, 24px) clamp(18px, 2.4vw, 28px) clamp(14px, 2vw, 18px) clamp(20px, 2.6vw, 30px);
  transition:transform .18s ease, box-shadow .18s ease;
  display:flex; flex-direction:column;
}
.nb-tcard:hover{ transform:translateY(-2px); box-shadow:0 14px 28px rgba(0,0,0,.08); }
.nb-tcard__accent{ position:absolute; left:-1px; top:-1px; bottom:-1px; width:6px; border-radius:18px 0 0 18px; background:linear-gradient(180deg, var(--nb-chocolate), color-mix(in oklab, var(--nb-chocolate), #000 14%)); }
.nb-tcard__qmark{ position:absolute; left:14px; top:10px; color:#e3e7e6; font-size:22px; line-height:1; }

/* Quote area */
.nb-tcard__quote{
  margin: 0 2px 12px 2px;
  font: inherit;
  font-size: 0.98rem;
  line-height: 1.66;
  color: #24292d;
  max-height: calc(var(--t-quote-lines) * 1.66em);
  overflow: auto;
}
.nb-tcard__quote p{ margin:0; }
.nb-tcard__quote::-webkit-scrollbar{ width:8px; }
.nb-tcard__quote::-webkit-scrollbar-thumb{ background:rgba(0,0,0,.12); border-radius:8px; }
.nb-tcard__quote{ scrollbar-width:thin; scrollbar-color: rgba(0,0,0,.18) transparent; }

/* Meta area */
.nb-tcard__meta{
  margin-top:auto; display:grid; grid-template-columns:auto 1fr; column-gap:12px; align-items:center;
  min-height:88px; padding-top:12px; border-top:1px solid #eef2f3;
}
.nb-tcard__avatar{ width:52px; height:52px; border-radius:50%; overflow:hidden; background:#f3f5f4; display:none; }
.nb-tcard__avatar-img{ width:100%; height:100%; object-fit:cover; display:block; }
.nb-tcard__who{ line-height:1.28; }
.nb-tcard__name{ font-weight:800; letter-spacing:.1px; color:#182126; margin-bottom:2px; }
.nb-tcard__title{ color: var(--nb_teal, #0C8A7B); font-weight:600; margin-top:2px; }
.nb-tcard__loc{ color:#6b7b86; font-size:.95rem; margin-top:1px; }
{% endstylesheet %}

{% schema %}
{
  "name": "Testimonials",
  "class": "section-wrapper nb-testimonials-wrap",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "Testimonials" },
    { "type": "text", "id": "subheading", "label": "Subheading", "default": "What our client's say" },

    { "type": "select", "id": "source", "label": "Source", "options": [
      { "value": "metaobject", "label": "Metaobject: NB Testimonial" },
      { "value": "blocks",     "label": "Manual (blocks)" }
    ], "default": "metaobject" },

    { "type": "list.metaobject", "id": "mo_list", "label": "Testimonials (metaobject list)", "limit": 24, "object": "nb_testimonial" },

    { "type": "range", "id": "limit", "label": "Max items", "min": 1, "max": 60, "step": 1, "default": 12 },
    { "type": "checkbox", "id": "show_filter", "label": "Show filter chips", "default": false },

    { "type": "header", "content": "Slider options" },
    { "type": "checkbox", "id": "carousel", "label": "Show as slider (horizontal scroll)", "default": true },
    { "type": "range", "id": "per_view", "label": "Cards per view (desktop)", "min": 1, "max": 3, "step": 1, "default": 3 },
    { "type": "text", "id": "cta_label", "label": "CTA label", "default": "View all" },
    { "type": "text", "id": "cta_link", "label": "CTA link", "default": "/pages/testimonial" }
  ],
  "blocks": [
    {
      "type": "testimonial",
      "name": "Testimonial",
      "settings": [
        { "type": "textarea", "id": "quote", "label": "Quote", "default": "“This work helped me get clear, make braver choices, and feel more alive in daily life.”" },
        { "type": "text", "id": "name", "label": "Name", "default": "Client name" },
        { "type": "text", "id": "title", "label": "Title / descriptor", "default": "Founder" },
        { "type": "text", "id": "location", "label": "Location", "default": "London, UK" },
        { "type": "image_picker", "id": "avatar", "label": "Avatar (optional)" },
        { "type": "text", "id": "tags", "label": "Tags (comma separated)", "default": "-" }
      ]
    }
  ],
  "presets": [{ "name": "Testimonials (grid/slider)" }]
}
{% endschema %}
