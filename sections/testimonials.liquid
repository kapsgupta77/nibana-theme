{% comment %}
Testimonials — grid or slider, metaobject or blocks
- If a metaobject list is provided (settings.mo_list), it is used.
- Otherwise, falls back to all nb_testimonial metaobjects.
- Otherwise, falls back to section blocks.
Relies on snippet: nb-testimonial-card (rich text safe).
{% endcomment %}

<section class="nb-testimonials tone-pebble">
  {%- liquid
    assign heading    = section.settings.heading        | default: 'What our clients say'
    assign sub        = section.settings.subheading     | default: '-'
    assign show_sub   = false
    if sub != '-' and sub != '' 
      assign show_sub = true
    endif

    assign source     = section.settings.source         | default: 'blocks'
    assign limit      = section.settings.limit          | default: 12

    assign carousel   = section.settings.carousel       | default: false
    assign cta_label  = section.settings.cta_label      | default: 'View all'
    assign cta_link   = section.settings.cta_link       | default: '/pages/testimonial'
  -%}

  <div id="nb-testimonials-{{ section.id }}" class="nb-shell nb-testimonials__container">
    {%- if heading != blank or show_sub -%}
      <header class="nb-testimonials__head">
        {%- if heading != blank -%}
          <h1 class="nb-h2 nb-testimonials__title">{{ heading }}</h1>
        {%- endif -%}
        {%- if show_sub -%}
          <p class="nb-testimonials__dek">{{ sub }}</p>
        {%- endif -%}
      </header>
    {%- endif -%}

    {%- comment -%} Build cards once {%- endcomment -%}
    {%- capture cards_only -%}
      {%- if source == 'metaobject' -%}
        {%- assign entries = section.settings.mo_list -%}
        {%- if entries == blank or entries.size == 0 -%}
          {%- assign entries = shop.metaobjects.nb_testimonial.values -%}
        {%- endif -%}

        {%- if entries and entries.size > 0 -%}
          {%- for m in entries limit: limit -%}
            {%- liquid
              assign q   = m.quote
              assign n   = m.name     | default: ''
              assign tt  = m.title    | default: ''
              assign loc = m.location | default: ''
              assign av  = m.avatar
              assign tg  = m.tags | join: ',' | default: ''
            -%}
            {% render 'nb-testimonial-card',
              quote: q,
              name: n,
              title: tt,
              location: loc,
              avatar: av,
              tags: tg %}
          {%- endfor -%}
        {%- endif -%}
      {%- else -%}
        {%- for block in section.blocks limit: limit -%}
          {%- assign q   = block.settings.quote    | default: '' -%}
          {%- assign n   = block.settings.name     | default: '' -%}
          {%- assign tt  = block.settings.title    | default: '' -%}
          {%- assign loc = block.settings.location | default: '' -%}
          {%- assign av  = block.settings.avatar -%}
          {%- assign tg  = block.settings.tags     | default: '' -%}
          {% render 'nb-testimonial-card', quote: q, name: n, title: tt, location: loc, avatar: av, tags: tg %}
        {%- endfor -%}
      {%- endif -%}
    {%- endcapture -%}

    {%- comment -%} Render grid or slider {%- endcomment -%}
    {%- if carousel -%}
      <div class="nb-tcarousel__viewport" data-viewport>
        <div class="nb-tcarousel__track" data-track>
          <div class="nb-tgrid" data-grid>{{ cards_only }}</div>
        </div>
      </div>
      <div class="nb-tcarousel__nav" data-nav hidden>
        <button class="nb-tcarousel__btn" type="button" aria-label="Previous" data-dir="-1">‹</button>
        <div class="nb-tcarousel__dots" aria-hidden="true" data-dots></div>
        <button class="nb-tcarousel__btn" type="button" aria-label="Next" data-dir="1">›</button>
      </div>
      {%- if cta_link != blank -%}
        <div class="nb-tcarousel__cta">
          <a class="nb-cta nb-cta--md" href="{{ cta_link }}">{{ cta_label }}</a>
        </div>
      {%- endif -%}
    {%- else -%}
      <div class="nb-tgrid" data-grid>{{ cards_only }}</div>
    {%- endif -%}

  </div>
</section>

{% javascript %}
(() => {
  const sec = document.getElementById('nb-testimonials-{{ section.id }}');
  if (!sec) return;

  // Only wire slider if enabled
  const isCarousel = {{ section.settings.carousel | json }};
  if (!isCarousel) return;

  const scroller  = sec.querySelector('.nb-tcarousel__track [data-grid]'); // real scroller
  const nav       = sec.querySelector('[data-nav]');
  const dotsBox   = sec.querySelector('[data-dots]');
  const prevBtn   = sec.querySelector('[data-dir="-1"]');
  const nextBtn   = sec.querySelector('[data-dir="1"]');

  if (!scroller || !nav || !prevBtn || !nextBtn) return;

  const vw = () => scroller.clientWidth;
  const pages = () => Math.max(1, Math.ceil(scroller.scrollWidth / vw()));
  let pageCount = pages();
  let active = 0;

  function buildDots(){
    if (!dotsBox) return;
    dotsBox.innerHTML = '';
    for (let i=0;i<pageCount;i++){
      const dot = document.createElement('i');
      if (i===active) dot.classList.add('is-active');
      dot.addEventListener('click', () => scroller.scrollTo({ left: i * vw(), behavior: 'smooth' }));
      dotsBox.appendChild(dot);
    }
  }

  function update(){
    active = Math.round(scroller.scrollLeft / vw());
    dotsBox?.querySelectorAll('i').forEach((d,i) => d.classList.toggle('is-active', i===active));
    nav.hidden = pageCount <= 1;
    prevBtn.disabled = active <= 0;
    nextBtn.disabled = active >= pageCount - 1;
  }

  prevBtn.addEventListener('click', () => scroller.scrollBy({ left: -vw(), behavior: 'smooth' }));
  nextBtn.addEventListener('click', () => scroller.scrollBy({ left:  vw(), behavior: 'smooth' }));

  const ro = new ResizeObserver(() => {
    const p = pages();
    if (p !== pageCount){ pageCount = p; buildDots(); }
    update();
  });
  ro.observe(scroller);

  buildDots();
  update();
  scroller.addEventListener('scroll', () => requestAnimationFrame(update), { passive:true });
})();
{% endjavascript %}

{% stylesheet %}
/* Container width aligns with the rest of the site */
.nb-testimonials__container{ max-width: var(--narrow-page-width, 1120px); margin: 0 auto; padding: 0 20px; }

/* Header */
.nb-testimonials__head{ margin: 0 0 clamp(10px, 2vw, 18px); text-align:center; }
.nb-testimonials__title{ margin:0 0 6px; }
.nb-testimonials__dek{ margin:0; color:#54636a; }

/* Grid mode (3/2/1) */
.nb-tgrid{ display:grid; gap: clamp(16px, 2.2vw, 26px); align-items: stretch; }
@media (min-width: 960px){ .nb-tgrid{ grid-template-columns: repeat(3, minmax(0,1fr)); } }
@media (min-width: 720px) and (max-width: 959.98px){ .nb-tgrid{ grid-template-columns: repeat(2, minmax(0,1fr)); } }
@media (max-width: 719.98px){ .nb-tgrid{ grid-template-columns: 1fr; } }

/* Slider layout overrides */
#nb-testimonials-{{ section.id }} .nb-tcarousel__viewport{ position:relative; overflow:hidden; }
#nb-testimonials-{{ section.id }} .nb-tcarousel__track{ display:block; }

/* Force horizontal card flow when slider is ON */
#nb-testimonials-{{ section.id }} .nb-tcarousel__track [data-grid]{
  width:100%;
  display:grid;
  grid-template-columns: none !important;  /* cancel normal grid columns */
  grid-auto-flow: column;
  grid-auto-columns: minmax(88%, 1fr);     /* mobile */
  gap:18px;
  scroll-snap-type: x mandatory;
  overflow-x:auto;
  padding: 4px 4px 8px;
  scrollbar-width: none;
}
#nb-testimonials-{{ section.id }} .nb-tcarousel__track [data-grid]::-webkit-scrollbar{ display:none; }
#nb-testimonials-{{ section.id }} .nb-tcard{ scroll-snap-align:start; }

/* 2-up on tablets */
@media (min-width: 740px){
  #nb-testimonials-{{ section.id }} .nb-tcarousel__track [data-grid]{ grid-auto-columns: minmax(48%, 1fr); }
}
/* N-up on desktop from control */
@media (min-width: 1024px){
  #nb-testimonials-{{ section.id }} .nb-tcarousel__track [data-grid]{
    grid-auto-columns: minmax(calc(100% / {{ section.settings.per_view | default: 3 }}), 1fr);
  }
}

/* Nav + dots */
#nb-testimonials-{{ section.id }} .nb-tcarousel__nav{
  display:flex; align-items:center; justify-content:center; gap:14px; margin:12px 0 0;
}
#nb-testimonials-{{ section.id }} .nb-tcarousel__btn{
  width:42px; height:42px; border-radius:999px;
  border:1px solid rgba(0,0,0,.08); background:#fff;
  box-shadow:0 8px 18px rgba(0,0,0,.08);
  font-size:22px; line-height:1; cursor:pointer;
}
#nb-testimonials-{{ section.id }} .nb-tcarousel__btn[disabled]{ opacity:.4; cursor:not-allowed; }
#nb-testimonials-{{ section.id }} .nb-tcarousel__dots{ display:flex; gap:8px; }
#nb-testimonials-{{ section.id }} .nb-tcarousel__dots i{
  width:7px; height:7px; border-radius:999px; background:#cfd6d2; display:inline-block;
}
#nb-testimonials-{{ section.id }} .nb-tcarousel__dots i.is-active{ background:#0C8A7B; }

/* CTA in teal */
#nb-testimonials-{{ section.id }} .nb-tcarousel__cta{ display:flex; justify-content:center; margin:16px 0 0; }
#nb-testimonials-{{ section.id }} .nb-tcarousel__cta .nb-cta{
  background: var(--nb_teal, #0C8A7B) !important;
  color:#fff !important;
  border-color: transparent !important;
}
#nb-testimonials-{{ section.id }} .nb-tcarousel__cta .nb-cta:hover{
  background: color-mix(in oklab, var(--nb_teal, #0C8A7B), #000 8%) !important;
}
{% endstylesheet %}

{% schema %}
{
  "name": "Testimonials",
  "class": "section-wrapper nb-testimonials-wrap",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "What our clients say" },
    { "type": "text", "id": "subheading", "label": "Subheading", "default": "-" },

    { "type": "select", "id": "source", "label": "Source", "options": [
      { "value": "blocks", "label": "Manual (blocks)" },
      { "value": "metaobject", "label": "Metaobject: NB Testimonial" }
    ], "default": "metaobject" },

    { "type": "metaobject_list", "id": "mo_list", "label": "Testimonials (metaobject list)", "metaobject_type": "nb_testimonial", "limit": 50 },

    { "type": "range", "id": "limit", "label": "Max items", "min": 1, "max": 60, "step": 1, "default": 12 },
    { "type": "checkbox", "id": "carousel", "label": "Show as slider (horizontal scroll)", "default": true },
    { "type": "range", "id": "per_view", "label": "Cards per view (desktop)", "min": 1, "max": 3, "step": 1, "default": 3 },
    { "type": "text", "id": "cta_label", "label": "CTA label", "default": "View all" },
    { "type": "text", "id": "cta_link", "label": "CTA link", "default": "/pages/testimonial" },
    { "type": "color_scheme", "id": "color_scheme", "label": "Color scheme", "default": "scheme-1" }
  ],
  "blocks": [
    {
      "type": "testimonial",
      "name": "Testimonial",
      "settings": [
        { "type": "textarea", "id": "quote", "label": "Quote", "default": "“This work helped me get clear, make braver choices, and feel more alive in daily life.”" },
        { "type": "text", "id": "name", "label": "Name", "default": "Client name" },
        { "type": "text", "id": "title", "label": "Title / descriptor", "default": "Founder" },
        { "type": "text", "id": "location", "label": "Location", "default": "London, UK" },
        { "type": "image_picker", "id": "avatar", "label": "Avatar (optional)" },
        { "type": "text", "id": "tags", "label": "Tags (comma separated)", "default": "-" }
      ]
    }
  ],
  "presets": [{ "name": "Testimonials (grid/slider)" }]
}
{% endschema %}
