{% comment %}
Testimonials — page grid with optional filter chips
Source: Manual blocks (default) or Metaobject `nb_testimonial`
{% endcomment %}

<section class="nb-testimonials tone-pebble">
  {%- liquid
    assign source      = section.settings.source      | default: 'blocks'
    assign limit       = section.settings.limit       | default: 12
    assign heading     = section.settings.heading     | default: 'What our clients say'
    assign sub_raw     = section.settings.subheading  | default: '-'
    assign show_chips  = section.settings.show_filter | default: true

    assign sub = sub_raw | strip
  -%}

  <div class="nb-shell nb-testimonials__container">
    {%- if heading != blank or sub != '-' and sub != '' -%}
      <header class="nb-testimonials__head">
        {%- if heading != blank -%}
          <h1 class="nb-h2 nb-testimonials__title">{{ heading }}</h1>
        {%- endif -%}
        {%- if sub != '-' and sub != '' -%}
          <p class="nb-testimonials__dek">{{ sub }}</p>
        {%- endif -%}
      </header>
    {%- endif -%}

    {%- capture render_cards -%}
      <div class="nb-tgrid" data-grid>
        {%- if source == 'metaobject' -%}
          {%- assign mo = shop.metaobjects['nb_testimonial'] -%}
          {%- if mo and mo.values and mo.values.size > 0 -%}
            {%- for m in mo.values limit: limit -%}
              {%- assign q   = m.quote    | default: '' -%}
              {%- assign n   = m.name     | default: '' -%}
              {%- assign tt  = m.title    | default: '' -%}
              {%- assign loc = m.location | default: '' -%}
              {%- assign av  = m.avatar -%}
              {%- assign tg  = m.tags | join: ',' | default: '' -%}
              {% render 'nb-testimonial-card',
                quote: q, name: n, title: tt, location: loc, avatar: av, tags: tg %}
            {%- endfor -%}
          {%- endif -%}
        {%- else -%}
          {%- for block in section.blocks limit: limit -%}
            {%- assign q   = block.settings.quote    | default: '' -%}
            {%- assign n   = block.settings.name     | default: '' -%}
            {%- assign tt  = block.settings.title    | default: '' -%}
            {%- assign loc = block.settings.location | default: '' -%}
            {%- assign av  = block.settings.avatar -%}
            {%- assign tg  = block.settings.tags     | default: '' -%}
            {% render 'nb-testimonial-card',
              quote: q, name: n, title: tt, location: loc, avatar: av, tags: tg %}
          {%- endfor -%}
        {%- endif -%}
      </div>
    {%- endcapture -%}

    {%- comment -%} Collect chips from manual blocks (clean + sort). {%- endcomment -%}
    {%- capture tag_collect -%}
      {%- for b in section.blocks -%}
        {%- if b.settings.tags != blank -%}
          {{- b.settings.tags | replace: ';', ',' | replace: ' ,', ',' | replace: ', ', ',' -}}, 
        {%- endif -%}
      {%- endfor -%}
    {%- endcapture -%}
    {%- assign tags_all = tag_collect | split: ',' | uniq | sort -%}
    {%- assign tags_clean = '' -%}
    {%- for t in tags_all -%}
      {%- assign tt = t | strip -%}
      {%- if tt != '' -%}{% assign tags_clean = tags_clean | append: tt | append: '||' %}{%- endif -%}
    {%- endfor -%}
    {%- assign tags_list = tags_clean | split: '||' -%}

    {%- if show_chips and tags_list.size > 0 -%}
      <nav class="nb-tchips" aria-label="Filter testimonials by tag" data-root="{{ section.id }}">
        <ul class="nb-tchips__list" data-chips>
          <li><button type="button" class="nb-chip is-active" data-filter="*">All</button></li>
          {%- for t in tags_list -%}
            <li><button type="button" class="nb-chip" data-filter="{{ t | handleize }}">{{ t }}</button></li>
          {%- endfor -%}
        </ul>
      </nav>
    {%- endif -%}

    {{ render_cards }}
  </div>
</section>

{% javascript %}
(() => {
  const root  = document.currentScript.closest('.nb-testimonials');
  if (!root) return;

  // Filter chips
  const grid  = root.querySelector('[data-grid]');
  const chips = root.querySelectorAll('[data-chips] .nb-chip');
  if (grid && chips.length){
    chips.forEach(chip => {
      chip.addEventListener('click', () => {
        chips.forEach(c => c.classList.remove('is-active'));
        chip.classList.add('is-active');
        const f = chip.getAttribute('data-filter');
        grid.querySelectorAll('.nb-tcard').forEach(card => {
          if (f === '*'){ card.hidden = false; return; }
          const ds = (card.getAttribute('data-tags') || '').toLowerCase();
          card.hidden = ds.indexOf(f) === -1;
        });
      });
    });
  }

  // Read more / less + fade
  root.querySelectorAll('.nb-tcard').forEach(card => {
    const quote = card.querySelector('[data-q]');
    const btn   = card.querySelector('[data-more]');
    if (!quote || !btn) return;

    const needsMore = quote.scrollHeight > quote.offsetHeight + 4;
    if (needsMore) { btn.hidden = false; card.classList.add('has-more'); }

    btn.addEventListener('click', () => {
      card.classList.toggle('is-open');
      btn.textContent = card.classList.contains('is-open') ? 'Show less' : 'Read full';
    });
  });
})();
{% endjavascript %}

{% stylesheet %}
/* Container width matches site rhythm */
.nb-testimonials__container{
  max-width: min(1160px, 94vw);
  margin-inline: auto;
  padding-inline: clamp(12px, 3vw, 22px);
}

/* Head */
.nb-testimonials{ --t-accent: var(--nb-chocolate); --t-gap: clamp(16px,2.6vw,24px); }
.nb-testimonials__head{ margin:0 0 clamp(10px,2vw,18px); text-align:left; }
.nb-testimonials__title{ margin:0 0 6px; }
.nb-testimonials__dek{ margin:0; color:#54636a; }

/* Chips */
.nb-tchips{ position:relative; margin:8px 0 18px; }
.nb-tchips__list{ display:flex; gap:10px; overflow:auto; padding:6px 8px 8px; list-style:none; margin:0; scrollbar-width:none;}
.nb-tchips__list::-webkit-scrollbar{ display:none; }
.nb-tchips::before,.nb-tchips::after{ content:""; position:absolute; top:0; bottom:0; width:28px; pointer-events:none; }
.nb-tchips::before{ left:0;  background:linear-gradient(90deg,#fff,rgba(255,255,255,0)); }
.nb-tchips::after{  right:0; background:linear-gradient(270deg,#fff,rgba(255,255,255,0)); }
.nb-chip{ display:inline-block; padding:.5rem .75rem; border-radius:999px; background:#fff; border:1px solid rgba(0,0,0,.08); box-shadow:0 4px 12px rgba(0,0,0,.05); }
.nb-chip.is-active{ background:#f6faf9; border-color:rgba(0,0,0,.06); font-weight:600; }

/* Grid — three columns at wide, fluid downwards */
.nb-tgrid{
  display:grid;
  gap: var(--t-gap);
  grid-template-columns: repeat(auto-fit, minmax(min(360px,100%), 1fr));
  align-items: stretch;
}

/* Card */
.nb-tcard{
  position:relative;
  display:flex;
  flex-direction:column;
  background:#fff;
  border:1px solid #e8ecef;
  border-radius:20px;
  box-shadow:0 12px 24px rgba(0,0,0,.06);
  padding: clamp(16px,1.8vw,22px) clamp(16px,1.8vw,22px) clamp(14px,1.6vw,20px) clamp(18px,2.2vw,24px);
  transition:transform .18s ease, box-shadow .18s ease;
}
.nb-tcard:hover{ transform:translateY(-2px); box-shadow:0 16px 30px rgba(0,0,0,.08); }

.nb-tcard__accent{
  position:absolute; left:-1px; top:-1px; bottom:-1px; width:6px; border-radius:20px 0 0 20px;
  background:linear-gradient(180deg, var(--t-accent), color-mix(in oklab, var(--t-accent), #000 14%));
}

/* Quote area: airy, clamped by default */
.nb-tcard__quote{
  position:relative;
  margin:0 0 14px;
  line-height:1.55;
  font-size: 0.98rem;
  color:#2a2f33;
  display:-webkit-box;
  -webkit-line-clamp: 9;           /* clamp */
  -webkit-box-orient: vertical;
  overflow:hidden;
}
.nb-tcard__quote p{ margin:0; }

/* Soft fade only when card.has-more and not expanded */
.nb-tcard.has-more:not(.is-open) .nb-tcard__quote::after{
  content:""; position:absolute; left:0; right:0; bottom:0; height:46px;
  background:linear-gradient(180deg, rgba(255,255,255,0), #fff 70%);
  pointer-events:none;
}

/* Meta pinned to bottom, consistent area */
.nb-tcard__meta{
  margin-top:auto;
  display:grid;
  grid-template-columns: auto 1fr;
  column-gap:12px;
  align-items:center;
  min-height:64px;                 /* keeps name/title/location area consistent */
}
.nb-tcard__avatar{ width:44px; height:44px; border-radius:50%; overflow:hidden; background:#eef2f1; }
.nb-tcard__avatar-img{ width:100%; height:100%; object-fit:cover; display:block; }

.nb-tcard__who{ line-height:1.25; }
.nb-tcard__name{ font-weight:760; }
.nb-tcard__title,.nb-tcard__loc{ color:#5b6870; font-size:.92em; }

/* Read more button */
.nb-tcard__more{
  align-self:flex-start;
  margin-top:10px;
  background:#fff;
  border:1px solid #e9eeed;
  border-radius:999px;
  padding:.46rem .78rem;
  font-size:.9rem;
  cursor:pointer;
  box-shadow:0 8px 16px rgba(0,0,0,.04);
}
.nb-tcard__more:hover{ box-shadow:0 12px 20px rgba(0,0,0,.06); }

/* Expanded state removes clamp */
.nb-tcard.is-open .nb-tcard__quote{
  display:block; -webkit-line-clamp:unset; overflow:visible;
}
.nb-tcard.is-open .nb-tcard__quote::after{ display:none; }
{% endstylesheet %}

{% schema %}
{
  "name": "Testimonials",
  "class": "section-wrapper nb-testimonials-wrap",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "What our clients say" },
    { "type": "text", "id": "subheading", "label": "Subheading", "default": "-" },
    { "type": "select", "id": "source", "label": "Source", "options": [
      { "value": "blocks", "label": "Manual (blocks)" },
      { "value": "metaobject", "label": "Metaobject: nb_testimonial" }
    ], "default": "blocks" },
    { "type": "range", "id": "limit", "label": "Max items", "min": 1, "max": 60, "step": 1, "default": 12 },
    { "type": "checkbox", "id": "show_filter", "label": "Show filter chips", "default": true },
    { "type": "color_scheme", "id": "color_scheme", "label": "Color scheme", "default": "scheme-1" },
    { "type": "header", "content": "Padding" },
    { "type": "range", "id": "padding-block-start", "label": "Top", "min": 0, "max": 100, "step": 1, "unit": "px", "default": 0 },
    { "type": "range", "id": "padding-block-end", "label": "Bottom", "min": 0, "max": 100, "step": 1, "unit": "px", "default": 0 }
  ],
  "blocks": [
    {
      "type": "testimonial",
      "name": "Testimonial",
      "settings": [
        { "type": "textarea", "id": "quote", "label": "Quote", "default": "“This work helped me get clear, make braver choices, and feel more alive in daily life.”" },
        { "type": "text", "id": "name", "label": "Name", "default": "Client name" },
        { "type": "text", "id": "title", "label": "Title / descriptor", "default": "Founder" },
        { "type": "text", "id": "location", "label": "Location", "default": "London, UK" },
        { "type": "image_picker", "id": "avatar", "label": "Avatar (optional)" },
        { "type": "text", "id": "tags", "label": "Tags (comma separated)", "default": "-" }
      ]
    }
  ],
  "presets": [{ "name": "Testimonials (grid)" }]
}
{% endschema %}

