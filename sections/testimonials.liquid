{% comment %}
Testimonials — page grid with filter chips and modal reader
Source: manual blocks (default) or metaobject `nb_testimonial`
{% endcomment %}

<section class="nb-testimonials tone-pebble">
  {%- liquid
    assign heading = section.settings.heading | default: 'What our clients say'
    assign sub = section.settings.subheading | default: '-'
    assign show_sub = false
    if sub != '-' and sub != ''
      assign show_sub = true
    endif

    assign source = section.settings.source | default: 'blocks'
    assign limit  = section.settings.limit  | default: 12

    assign tag_bucket = ''
  -%}

  <div class="nb-shell nb-testimonials__container">
    {%- if heading != blank or show_sub -%}
      <header class="nb-testimonials__head">
        {%- if heading != blank -%}
          <h1 class="nb-h2 nb-testimonials__title">{{ heading }}</h1>
        {%- endif -%}
        {%- if show_sub -%}
          <p class="nb-testimonials__dek">{{ sub }}</p>
        {%- endif -%}
      </header>
    {%- endif -%}

    {%- capture render_cards -%}
      <div class="nb-tgrid" data-grid>
        {%- if source == 'metaobject' -%}
          {%- assign mo = shop.metaobjects['nb_testimonial'] -%}
          {%- if mo and mo.values and mo.values.size > 0 -%}
            {%- for m in mo.values limit: limit -%}
              {%- liquid
                assign q   = m.quote     | default: ''
                assign n   = m.name      | default: ''
                assign tt  = m.title     | default: ''
                assign loc = m.location  | default: ''
                assign av  = m.avatar
                assign tg  = m.tags | join: ',' | default: ''
                assign tag_bucket = tag_bucket | append: ',' | append: tg
              -%}
              {% render 'nb-testimonial-card', quote: q, name: n, title: tt, location: loc, avatar: av, tags: tg %}
            {%- endfor -%}
          {%- endif -%}
        {%- else -%}
          {%- for block in section.blocks limit: limit -%}
            {%- liquid
              assign q   = block.settings.quote    | default: ''
              assign n   = block.settings.name     | default: ''
              assign tt  = block.settings.title    | default: ''
              assign loc = block.settings.location | default: ''
              assign av  = block.settings.avatar
              assign tg  = block.settings.tags     | default: ''
              assign tag_bucket = tag_bucket | append: ',' | append: tg
            -%}
            {% render 'nb-testimonial-card', quote: q, name: n, title: tt, location: loc, avatar: av, tags: tg %}
          {%- endfor -%}
        {%- endif -%}
      </div>
    {%- endcapture -%}

    {%- comment -%} Build unique, cleaned tag list for chips {%- endcomment -%}
    {%- assign tags_tmp = tag_bucket | replace: ';', ',' | replace: ' ,', ',' | replace: ', ', ',' | split: ',' -%}
    {%- assign tags_all = tags_tmp | uniq | sort -%}
    {%- assign tags_clean = '' -%}
    {%- for t in tags_all -%}
      {%- assign tt = t | strip -%}
      {%- if tt != '' -%}{%- assign tags_clean = tags_clean | append: tt | append: '||' -%}{%- endif -%}
    {%- endfor -%}
    {%- assign tags_list = tags_clean | split: '||' -%}

    {%- if section.settings.show_filter and tags_list.size > 0 -%}
      <nav class="nb-tchips" aria-label="Filter testimonials by tag" data-root="{{ section.id }}">
        <ul class="nb-tchips__list" data-chips>
          <li><button type="button" class="nb-chip is-active" data-filter="*">All</button></li>
          {%- for t in tags_list -%}
            <li><button type="button" class="nb-chip" data-filter="{{ t | handleize }}">{{ t }}</button></li>
          {%- endfor -%}
        </ul>
      </nav>
    {%- endif -%}

    {{ render_cards }}
<div class="nb-modal" id="nb-testimonial-modal" hidden>
  <div class="nb-modal__overlay" data-close></div>
  <div class="nb-modal__dialog" role="dialog" aria-modal="true" aria-label="Testimonial">
    <button class="nb-modal__close" type="button" aria-label="Close" data-close>&times;</button>
    <div class="nb-modal__content">
      <div class="nb-modal__quote" data-modal-quote></div>
      <div class="nb-modal__who">
        <div class="nb-modal__name"  data-modal-name></div>
        <div class="nb-modal__title" data-modal-title></div>
        <div class="nb-modal__loc"   data-modal-loc></div>
      </div>
    </div>
  </div>
</div>
  </div>
</section>

{% javascript %}
(() => {
  const sec = document.getElementById('shopify-section-{{ section.id }}');
  if (!sec) return;

  const modal = sec.querySelector('#nb-testimonial-modal');
  const qOut  = modal?.querySelector('[data-modal-quote]');
  const nOut  = modal?.querySelector('[data-modal-name]');
  const tOut  = modal?.querySelector('[data-modal-title]');
  const lOut  = modal?.querySelector('[data-modal-loc]');

  // ---------- Filter chips (unchanged) ----------
  const grid  = sec.querySelector('[data-grid]');
  const chips = sec.querySelectorAll('[data-chips] .nb-chip');
  if (grid && chips.length){
    chips.forEach(chip => {
      chip.addEventListener('click', () => {
        chips.forEach(c => c.classList.remove('is-active'));
        chip.classList.add('is-active');
        const f = chip.getAttribute('data-filter');
        grid.querySelectorAll('.nb-tcard').forEach(card => {
          if (f === '*'){ card.hidden = false; return; }
          const ds = (card.getAttribute('data-tags') || '').toLowerCase();
          card.hidden = ds.indexOf(f) === -1;
        });
      });
    });
  }

  // ---------- Decide if "Read full" is needed ----------
  function needsMore(q){
    const clone = q.cloneNode(true);
    clone.style.cssText = `
      position:absolute; visibility:hidden; pointer-events:none;
      display:block; -webkit-line-clamp:unset; overflow:visible; height:auto;
      width:${q.clientWidth}px;`;
    q.parentNode.appendChild(clone);
    const more = clone.scrollHeight > q.clientHeight + 2;
    clone.remove();
    return more;
  }

  function evaluate(card){
    const q   = card.querySelector('[data-q]');
    const btn = card.querySelector('[data-more]');
    if (!q || !btn) return;
    const more = needsMore(q);
    card.classList.toggle('has-more', more);
    btn.hidden = !more;
  }

  // ---------- Modal open / close ----------
  function openModal(card){
    if (!modal) return;
    const quoteEl = card.querySelector('[data-q]');
    const nameEl  = card.querySelector('.nb-tcard__name');
    const titleEl = card.querySelector('.nb-tcard__title');
    const locEl   = card.querySelector('.nb-tcard__loc');

    qOut.innerHTML = quoteEl ? quoteEl.innerHTML : '';
    nOut.textContent = nameEl ? nameEl.textContent : '';
    tOut.textContent = titleEl ? titleEl.textContent : '';
    lOut.textContent = locEl ? locEl.textContent : '';

    modal.hidden = false;
    document.documentElement.classList.add('nb-modal-open');
  }
  function closeModal(){
    if (!modal) return;
    modal.hidden = true;
    document.documentElement.classList.remove('nb-modal-open');
  }

  modal?.querySelectorAll('[data-close]').forEach(el => el.addEventListener('click', closeModal));
  document.addEventListener('keydown', (e) => { if (e.key === 'Escape') closeModal(); });

  // ---------- Wire up each card ----------
  sec.querySelectorAll('.nb-tcard').forEach(card => {
    const q   = card.querySelector('[data-q]');
    const btn = card.querySelector('[data-more]');
    if (q){
      q.addEventListener('click', () => openModal(card));
      q.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); openModal(card); }
      });
    }
    if (btn) btn.addEventListener('click', () => openModal(card));

    const ro = new ResizeObserver(() => evaluate(card));
    if (q) ro.observe(q);
    window.addEventListener('load', () => evaluate(card));
    setTimeout(() => evaluate(card), 150);
    evaluate(card);
  });
})();
{% endjavascript %}

{% stylesheet %}
/* Container width aligns with the rest of the site */
.nb-testimonials__container{ max-width: var(--narrow-page-width, 1120px); margin: 0 auto; padding: 0 20px; }

/* Header */
.nb-testimonials__head{ margin: 0 0 clamp(10px, 2vw, 18px); }
.nb-testimonials__title{ margin:0 0 6px; }
.nb-testimonials__dek{ margin:0; color:#54636a; }

/* Chips scroller */
.nb-tchips{ position:relative; margin:8px 0 18px; }
.nb-tchips__list{ display:flex; gap:10px; overflow:auto; padding:6px 8px 8px; margin:0; list-style:none; scrollbar-width:none; }
.nb-tchips__list::-webkit-scrollbar{ display:none; }
.nb-tchips::before,.nb-tchips::after{ content:""; position:absolute; top:0; bottom:0; width:28px; pointer-events:none; }
.nb-tchips::before{ left:0; background:linear-gradient(90deg,#fff,rgba(255,255,255,0)); }
.nb-tchips::after{ right:0; background:linear-gradient(270deg,#fff,rgba(255,255,255,0)); }
.nb-chip{ display:inline-block; padding:.5rem .75rem; border-radius:999px; background:#fff; border:1px solid rgba(0,0,0,.08); box-shadow:0 4px 12px rgba(0,0,0,.05); white-space:nowrap; }
.nb-chip.is-active{ background:#f6faf9; border-color:rgba(0,0,0,.06); font-weight:600; }

/* 3 / 2 / 1 columns grid */
.nb-tgrid{ display:grid; gap: clamp(14px, 2.2vw, 24px); align-items: stretch; }
@media (min-width: 960px){ .nb-tgrid{ grid-template-columns: repeat(3, minmax(0,1fr)); } }
@media (min-width: 720px) and (max-width: 959.98px){ .nb-tgrid{ grid-template-columns: repeat(2, minmax(0,1fr)); } }
@media (max-width: 719.98px){ .nb-tgrid{ grid-template-columns: 1fr; } }

/* Card */
.nb-tcard{
  position:relative; background:#fff; border:1px solid #e8ecef; border-radius:18px;
  box-shadow:0 10px 22px rgba(0,0,0,.06);
  padding: clamp(16px, 2.2vw, 22px) clamp(16px, 2.2vw, 24px) clamp(14px, 2vw, 18px) clamp(18px, 2.4vw, 26px);
  transition:transform .18s ease, box-shadow .18s ease;
display:flex;
  flex-direction:column;
}
.nb-tcard:hover{ transform:translateY(-2px); box-shadow:0 14px 28px rgba(0,0,0,.08); }
.nb-tcard__accent{ position:absolute; left:-1px; top:-1px; bottom:-1px; width:6px; border-radius:18px 0 0 18px; background:linear-gradient(180deg, var(--nb-chocolate), color-mix(in oklab, var(--nb-chocolate), #000 14%)); }
.nb-tcard__qmark{ position:absolute; left:12px; top:12px; color:#e3e7e6; font-size:22px; line-height:1; }

/* Quote */
.nb-tcard__quote{
  margin: 0 4px 12px 4px;
  font: inherit;
  font-size: 1rem;
  line-height: 1.66;
  color: #24292d;
  display: -webkit-box;
  -webkit-line-clamp: 9;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
.nb-tcard__quote p{ margin:0; }

/* Fixed meta area */
.nb-tcard__meta{
  margin-top:auto; display:grid; grid-template-columns:auto 1fr; column-gap:12px; align-items:center;
  min-height:88px; padding-top:12px; border-top:1px solid #eef2f3;
}
.nb-tcard__avatar{ width:52px; height:52px; border-radius:50%; overflow:hidden; background:#f3f5f4; display:none; }
.nb-tcard__avatar-img{ width:100%; height:100%; object-fit:cover; display:block; }
.nb-tcard__who{ line-height:1.28; }
.nb-tcard__name{ font-weight:800; letter-spacing:.1px; color:#182126; margin-bottom:2px; }
.nb-tcard__title{ color: var(--nb_teal, #0C8A7B); font-weight:600; margin-top:2px; }
.nb-tcard__loc{ color:#6b7b86; font-size:.95rem; margin-top:1px; }

/* Read full button (only visible when needed) */
.nb-tcard__more{
  margin-top: 8px;
  background:#fff; border:1px solid #e9eeee; border-radius:999px;
  padding:.5rem 1rem; font-size:.94rem; cursor:pointer;
  box-shadow:0 10px 22px rgba(0,0,0,.06);
}
.nb-tcard:not(.has-more) .nb-tcard__more{ display:none; }

/* Modal */
.nb-no-scroll{ overflow:hidden; }
.nb-tmodal{ position:fixed; inset:0; background:rgba(0,0,0,.35); display:none; align-items:center; justify-content:center; padding:20px; z-index:60; }
.nb-tmodal.is-open{ display:flex; }
.nb-tmodal__panel{
  background:#fff; border-radius:18px; border:1px solid #e8ecef;
  width:min(720px, 92vw); max-height:88vh; overflow:auto; position:relative;
  padding: clamp(18px, 2.2vw, 26px) clamp(18px, 2.4vw, 28px);
  box-shadow:0 22px 50px rgba(0,0,0,.16);
}
.nb-tmodal__close{
  position:absolute; right:10px; top:8px; width:36px; height:36px; border-radius:999px;
  background:#f4f7f6; border:1px solid #e6eceb; cursor:pointer; font-size:20px; line-height:1;
}
.nb-tmodal__qmark{ color:#e3e7e6; font-size:22px; line-height:1; }
.nb-tmodal__quote{ margin: 6px 0 14px; line-height:1.66; }
.nb-tmodal__who .nb-tmodal__name{ font-weight:800; }
.nb-tmodal__who .nb-tmodal__title{ color: var(--nb_teal, #0C8A7B); font-weight:600; margin-top:2px; }
.nb-tmodal__who .nb-tmodal__loc{ color:#6b7b86; margin-top:1px; }

/* Card structure (ensures name/title/location are bottom-aligned) */
.nb-tcard{ display:flex; flex-direction:column; }
.nb-tcard__quote{
  margin: 0 4px 14px 4px;
  font-size: 1rem;
  line-height: 1.66;
  color:#24292d;
  display:-webkit-box; -webkit-line-clamp:9; -webkit-box-orient:vertical; overflow:hidden;
}
.nb-tcard__meta{ margin-top:auto; display:grid; grid-template-columns:auto 1fr; column-gap:12px; align-items:flex-start; padding-top:12px; border-top:1px solid #eef2f1; }
.nb-tcard__name{ font-weight:800; letter-spacing:.1px; color:#182126; margin-bottom:2px; }
.nb-tcard__title{ color: var(--nb-teal, #0C8A7B); font-weight:600; margin-top:2px; }
.nb-tcard__loc{ color:#6b777f; font-size:.95rem; margin-top:2px; }
.nb-tcard__more{
  align-self:flex-start; margin-top:10px; background:#fff; border:1px solid #e9eeed; border-radius:999px;
  padding:.55rem .9rem; font-size:.94rem; cursor:pointer; box-shadow:0 10px 20px rgba(0,0,0,.06);
}
.nb-tcard:not(.has-more) .nb-tcard__more{ display:none; }

/* Decorative open-quote */
.nb-tcard__qmark{ position:absolute; left:12px; top:8px; font-size:28px; line-height:1; color:#e6e9e9; }
@media (max-width: 739px){ .nb-tcard__qmark{ display:none; } }

/* Modal */
.nb-modal{ position:fixed; inset:0; z-index:60; display:grid; place-items:center; }
.nb-modal[hidden]{ display:none; }
.nb-modal__overlay{ position:absolute; inset:0; background:rgba(0,0,0,.38); }
.nb-modal__dialog{
  position:relative; width:min(760px, calc(100vw - 32px)); max-height:min(88vh, 900px);
  background:#fff; border-radius:18px; box-shadow:0 30px 60px rgba(0,0,0,.25);
  overflow:auto; padding:22px 22px 18px;
}
.nb-modal__close{ position:absolute; top:8px; right:10px; width:36px; height:36px; border-radius:999px; border:1px solid #e9eeed; background:#fff; cursor:pointer; }
.nb-modal__quote{ font-size:1.05rem; line-height:1.72; color:#24292d; margin-bottom:14px; }
.nb-modal__who .nb-modal__name{ font-weight:800; color:#182126; }
.nb-modal__who .nb-modal__title{ color: var(--nb-teal, #0C8A7B); font-weight:600; margin-top:2px; }
.nb-modal__who .nb-modal__loc{ color:#6b777f; margin-top:2px; }

/* Lock the page when modal is open */
.nb-modal-open{ overflow:hidden; }

{% endstylesheet %}

{% schema %}
{
  "name": "Testimonials",
  "class": "section-wrapper nb-testimonials-wrap",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "What our clients say" },
    { "type": "text", "id": "subheading", "label": "Subheading", "default": "-" },
    { "type": "select", "id": "source", "label": "Source", "options": [
      { "value": "blocks", "label": "Manual (blocks)" },
      { "value": "metaobject", "label": "Metaobject: nb_testimonial" }
    ], "default": "blocks" },
    { "type": "range", "id": "limit", "label": "Max items", "min": 1, "max": 60, "step": 1, "default": 12 },
    { "type": "checkbox", "id": "show_filter", "label": "Show filter chips", "default": true },
    { "type": "color_scheme", "id": "color_scheme", "label": "Color scheme", "default": "scheme-1" },
    { "type": "header", "content": "Padding" },
    { "type": "range", "id": "padding-block-start", "label": "Top", "min": 0, "max": 100, "step": 1, "unit": "px", "default": 0 },
    { "type": "range", "id": "padding-block-end", "label": "Bottom", "min": 0, "max": 100, "step": 1, "unit": "px", "default": 0 }
  ],
  "blocks": [
    {
      "type": "testimonial",
      "name": "Testimonial",
      "settings": [
        { "type": "textarea", "id": "quote", "label": "Quote", "default": "“This work helped me get clear, make braver choices, and feel more alive in daily life.”" },
        { "type": "text", "id": "name", "label": "Name", "default": "Client name" },
        { "type": "text", "id": "title", "label": "Title / descriptor", "default": "Founder" },
        { "type": "text", "id": "location", "label": "Location", "default": "London, UK" },
        { "type": "image_picker", "id": "avatar", "label": "Avatar (optional)" },
        { "type": "text", "id": "tags", "label": "Tags (comma separated)", "default": "-" }
      ]
    }
  ],
  "presets": [{ "name": "Testimonials (grid)" }]
}
{% endschema %}


