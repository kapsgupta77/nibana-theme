{% comment %}
Testimonials — page grid with filter chips
Source: Manual blocks (default) or Metaobject `nb_testimonial`
{% endcomment %}

<section class="nb-testimonials tone-pebble">
  <div class="nb-shell nb-testimonials__container">
    {%- liquid
      assign source  = section.settings.source  | default: 'blocks'
      assign limit   = section.settings.limit   | default: 12
      assign heading = section.settings.heading | default: 'What our clients say'
      assign sub     = section.settings.subheading | default: '-'
      assign show_sub = false
      if sub and sub != '-' and sub != ''
        assign show_sub = true
      endif
    -%}

    {%- if heading != blank or show_sub -%}
      <header class="nb-testimonials__head">
        {%- if heading != blank -%}
          <h1 class="nb-h2 nb-testimonials__title">{{ heading }}</h1>
        {%- endif -%}
        {%- if show_sub -%}
          <p class="nb-testimonials__dek">{{ sub }}</p>
        {%- endif -%}
      </header>
    {%- endif -%}

    {%- capture render_cards -%}
      <div class="nb-tgrid" data-grid>
        {%- assign tag_bucket = '' -%}
        {%- if source == 'metaobject' -%}
          {%- assign mo = shop.metaobjects['nb_testimonial'] -%}
          {%- if mo and mo.values and mo.values.size > 0 -%}
            {%- for m in mo.values limit: limit -%}
              {%- assign q   = m.quote    | default: '' -%}
              {%- assign n   = m.name     | default: '' -%}
              {%- assign tt  = m.title    | default: '' -%}
              {%- assign loc = m.location | default: '' -%}
              {%- assign av  = m.avatar -%}
              {%- assign tg  = m.tags | join: ',' | default: '' -%}
              {%- assign tag_bucket = tag_bucket | append: ',' | append: tg -%}
              {% render 'nb-testimonial-card', quote: q, name: n, title: tt, location: loc, avatar: av, tags: tg %}
            {%- endfor -%}
          {%- endif -%}
        {%- else -%}
          {%- for block in section.blocks limit: limit -%}
            {%- assign q   = block.settings.quote    | default: '' -%}
            {%- assign n   = block.settings.name     | default: '' -%}
            {%- assign tt  = block.settings.title    | default: '' -%}
            {%- assign loc = block.settings.location | default: '' -%}
            {%- assign av  = block.settings.avatar -%}
            {%- assign tg  = block.settings.tags     | default: '' -%}
            {%- assign tag_bucket = tag_bucket | append: ',' | append: tg -%}
            {% render 'nb-testimonial-card', quote: q, name: n, title: tt, location: loc, avatar: av, tags: tg %}
          {%- endfor -%}
        {%- endif -%}
      </div>
    {%- endcapture -%}

    {%- assign tags_all = tag_bucket | split: ',' | uniq | sort -%}
    {%- assign tags_clean = '' -%}
    {%- for t in tags_all -%}
      {%- assign tt = t | strip -%}
      {%- if tt != '' and tt != '-' -%}
        {%- assign tags_clean = tags_clean | append: tt | append: '||' -%}
      {%- endif -%}
    {%- endfor -%}
    {%- assign tags_list = tags_clean | split: '||' -%}

    {%- if section.settings.show_filter and tags_list.size > 0 -%}
      <nav class="nb-tchips" aria-label="Filter testimonials by tag" data-root="{{ section.id }}">
        <ul class="nb-tchips__list" data-chips>
          <li><button type="button" class="nb-chip is-active" data-filter="*">All</button></li>
          {%- for t in tags_list -%}
            <li><button type="button" class="nb-chip" data-filter="{{ t | handleize }}">{{ t }}</button></li>
          {%- endfor -%}
        </ul>
      </nav>
    {%- endif -%}

    {{ render_cards }}
  </div>
</section>

{% javascript %}
(() => {
  const sec  = document.getElementById('shopify-section-{{ section.id }}');
  if (!sec) return;

  const grid  = sec.querySelector('[data-grid]');
  const chips = sec.querySelectorAll('[data-chips] .nb-chip');

  // Filter chips
  if (grid && chips.length) {
    chips.forEach(chip => {
      chip.addEventListener('click', () => {
        chips.forEach(c => c.classList.remove('is-active'));
        chip.classList.add('is-active');
        const f = chip.getAttribute('data-filter');
        grid.querySelectorAll('.nb-tcard').forEach(card => {
          if (f === '*') { card.hidden = false; return; }
          const ds = (card.getAttribute('data-tags') || '').toLowerCase();
          card.hidden = ds.indexOf(f) === -1;
        });
      });
    });
  }

  // Measure whether the quote overflows (with line-clamp applied)
  function needsMore(q){
    const clone = q.cloneNode(true);
    clone.style.cssText = `
      position:absolute; visibility:hidden; pointer-events:none;
      display:block; -webkit-line-clamp:unset; overflow:visible; height:auto;
      width:${q.clientWidth}px;`;
    q.parentNode.appendChild(clone);
    const full = clone.scrollHeight;
    clone.remove();
    return full > q.clientHeight + 2;
  }

  function evaluate(card){
    const q   = card.querySelector('[data-q]');
    const btn = card.querySelector('[data-more]');
    if (!q || !btn) return;
    const over = needsMore(q);
    card.classList.toggle('has-more', over);
    btn.hidden = !over;
    if (!over) { card.classList.remove('is-open'); btn.textContent = 'Read full'; }
  }

  function toggle(card){
    const btn = card.querySelector('[data-more]');
    const open = card.classList.toggle('is-open');
    if (btn) btn.textContent = open ? 'Show less' : 'Read full';
  }

  (sec.querySelectorAll('.nb-tcard') || []).forEach(card => {
    const q   = card.querySelector('[data-q]');
    const btn = card.querySelector('[data-more]');

    if (q){
      q.addEventListener('click', () => toggle(card));
      q.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); toggle(card); }
      });
    }
    if (btn) btn.addEventListener('click', () => toggle(card));

    const ro = new ResizeObserver(() => evaluate(card));
    if (q) ro.observe(q);
    evaluate(card);
    setTimeout(() => evaluate(card), 200);
    window.addEventListener('load', () => evaluate(card));
  });
})();
{% endjavascript %}

{% stylesheet %}
/* Container & header */
.nb-testimonials__container{max-width:var(--page-content-width);margin:0 auto;}
.nb-testimonials__head{margin:0 0 clamp(8px,1.8vw,16px);}
.nb-testimonials__dek{color:#516068;margin:0}

/* Chips: single-row scroller (no wrapping) */
.nb-tchips{position:relative;margin:8px 0 16px}
.nb-tchips__list{display:flex;gap:10px;overflow:auto;padding:6px 8px 8px;list-style:none;margin:0;scrollbar-width:none;flex-wrap:nowrap}
.nb-tchips__list::-webkit-scrollbar{display:none}
.nb-tchips::before,.nb-tchips::after{content:"";position:absolute;top:0;bottom:0;width:28px;pointer-events:none}
.nb-tchips::before{left:0;background:linear-gradient(90deg,#fff,rgba(255,255,255,0))}
.nb-tchips::after{right:0;background:linear-gradient(270deg,#fff,rgba(255,255,255,0))}
.nb-chip{display:inline-block;padding:.5rem .75rem;border-radius:999px;background:#fff;border:1px solid rgba(0,0,0,.08);box-shadow:0 4px 12px rgba(0,0,0,.05)}
.nb-chip.is-active{background:#f6faf9;border-color:rgba(0,0,0,.06);font-weight:600}

/* Grid */
/* Grid: 3 cards desktop, 2 on tablet, 1 on mobile */
.nb-tgrid{
  display:grid;
  gap: clamp(14px, 2.2vw, 22px);
  grid-template-columns: repeat(3, minmax(0, 1fr));
  align-items: stretch;
}

@media (max-width: 1100px){
  .nb-tgrid{ grid-template-columns: repeat(2, minmax(0, 1fr)); }
}

@media (max-width: 680px){
  .nb-tgrid{ grid-template-columns: 1fr; }
}

/* Card */
.nb-tcard{
  position:relative;background:#fff;border:1px solid #e8ecef;border-radius:18px;
  box-shadow:0 10px 22px rgba(0,0,0,.06);padding:20px 20px 16px 22px;
  display:flex;flex-direction:column;min-height:260px;transition:transform .18s ease, box-shadow .18s ease
}
.nb-tcard:hover{transform:translateY(-2px);box-shadow:0 14px 28px rgba(0,0,0,.08)}
.nb-tcard__accent{position:absolute;left:-1px;top:-1px;bottom:-1px;width:6px;border-radius:18px 0 0 18px;background:linear-gradient(180deg,var(--nb-chocolate),color-mix(in oklab,var(--nb-chocolate),#000 14%))}
.nb-tcard__qmark{position:absolute;left:12px;top:8px;opacity:.14;font-size:30px;line-height:1}

/* Quote (clamped by default) */
.nb-tcard__quote{
  margin:0 0 10px;font-size:1.05rem;line-height:1.68;letter-spacing:.005em;color:#24292d;
  display:-webkit-box;-webkit-line-clamp:7;-webkit-box-orient:vertical;overflow:hidden;cursor:pointer
}
.nb-tcard__quote p{margin:0 0 .4rem}

/* Fade only when truncated */
.nb-tcard.has-more:not(.is-open) .nb-tcard__quote::after{
  content:"";position:absolute;left:22px;right:22px;bottom:92px;height:56px;
  background:linear-gradient(180deg,rgba(255,255,255,0),#fff 70%);pointer-events:none
}

/* Expanded state */
.nb-tcard.is-open .nb-tcard__quote{-webkit-line-clamp:unset;overflow:visible}

/* Meta pinned to bottom */
.nb-tcard__meta{
  margin-top:auto;display:grid;grid-template-columns:auto 1fr;column-gap:12px;align-items:flex-start;
  min-height:92px;padding-top:12px;border-top:1px solid #eef2f4
}
.nb-tcard__avatar{width:52px;height:52px;border-radius:50%;overflow:hidden;background:#f1f3f2}
.nb-tcard__avatar-img{width:100%;height:100%;object-fit:cover;display:block}
.nb-tcard__name{font-weight:800;letter-spacing:.01em;color:#182126;margin-bottom:2px}
.nb-tcard__title{color:var(--nb-teal,#0C8A7B);font-weight:600;margin-top:2px}
.nb-tcard__loc{color:#6b777f;font-size:.95rem;margin-top:2px}

/* “Read full” button (hidden unless has-more) */
.nb-tcard__more{
  align-self:flex-start;margin:10px 0 6px;background:#fff;border:1px solid #e9eeed;border-radius:999px;
  padding:.55rem .9rem;font-size:.94rem;cursor:pointer;box-shadow:0 10px 20px rgba(0,0,0,.06)
}
.nb-tcard__more:hover{box-shadow:0 14px 26px rgba(0,0,0,.08)}
.nb-tcard:not(.has-more) .nb-tcard__more{display:none}
{% endstylesheet %}

{% schema %}
{
  "name": "Testimonials",
  "class": "section-wrapper nb-testimonials-wrap",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "What our clients say" },
    { "type": "text", "id": "subheading", "label": "Subheading", "default": "-" },
    { "type": "select", "id": "source", "label": "Source", "options": [
      { "value": "blocks", "label": "Manual (blocks)" },
      { "value": "metaobject", "label": "Metaobject: nb_testimonial" }
    ], "default": "blocks" },
    { "type": "range", "id": "limit", "label": "Max items", "min": 1, "max": 60, "step": 1, "default": 12 },
    { "type": "checkbox", "id": "show_filter", "label": "Show filter chips", "default": true },
    { "type": "color_scheme", "id": "color_scheme", "label": "Color scheme", "default": "scheme-1" },
    { "type": "header", "content": "Padding" },
    { "type": "range", "id": "padding-block-start", "label": "Top", "min": 0, "max": 100, "step": 1, "unit": "px", "default": 0 },
    { "type": "range", "id": "padding-block-end", "label": "Bottom", "min": 0, "max": 100, "step": 1, "unit": "px", "default": 0 }
  ],
  "blocks": [
    {
      "type": "testimonial",
      "name": "Testimonial",
      "settings": [
        { "type": "textarea", "id": "quote", "label": "Quote", "default": "“This work helped me get clear, make braver choices, and feel more alive in daily life.”" },
        { "type": "text", "id": "name", "label": "Name", "default": "Client name" },
        { "type": "text", "id": "title", "label": "Title / descriptor", "default": "Founder" },
        { "type": "text", "id": "location", "label": "Location", "default": "London, UK" },
        { "type": "image_picker", "id": "avatar", "label": "Avatar (optional)" },
        { "type": "text", "id": "tags", "label": "Tags (comma separated)", "default": "-" }
      ]
    }
  ],
  "presets": [{ "name": "Testimonials (grid)" }]
}
{% endschema %}

