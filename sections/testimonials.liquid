{% comment %}
Testimonials — page grid with filter chips
Source: Manual blocks (default) or Metaobject `nb_testimonial`
{% endcomment %}

<section class="nb-testimonials tone-pebble">
  {%- liquid
    assign source = section.settings.source | default: 'blocks'
    assign limit  = section.settings.limit  | default: 12

    assign has_any   = false
    assign tag_bucket = ''

    assign heading = section.settings.heading | default: 'What our clients say'
    assign sub_raw = section.settings.subheading | default: '-'
    assign sub     = sub_raw | strip
  -%}

  {%- if heading != blank or (sub != '-' and sub != '') -%}
  <header class="nb-testimonials__head">
    {%- if heading != blank -%}
      <h1 class="nb-h2 nb-testimonials__title">{{ heading }}</h1>
    {%- endif -%}
    {%- if sub != '-' and sub != '' -%}
      <p class="nb-testimonials__dek">{{ sub }}</p>
    {%- endif -%}
  </header>
  {%- endif -%}

  {%- capture render_cards -%}
  <div class="nb-tgrid" data-grid>
    {%- if source == 'metaobject' -%}
      {%- assign mo = shop.metaobjects['nb_testimonial'] -%}
      {%- if mo and mo.values and mo.values.size > 0 -%}
        {%- for m in mo.values limit: limit -%}
          {%- assign q   = m.quote    | default: '' -%}
          {%- assign n   = m.name     | default: '' -%}
          {%- assign tt  = m.title    | default: '' -%}
          {%- assign loc = m.location | default: '' -%}
          {%- assign av  = m.avatar -%}
          {%- assign tg  = m.tags | join: ',' | default: '' -%}
          {%- if q != '' or n != '' -%}{% assign has_any = true %}{% endif -%}
          {%- assign tags_norm = tg | replace: ';', ',' | replace: ' ,', ',' | replace: ', ', ',' -%}
          {%- assign tag_bucket = tag_bucket | append: ',' | append: tags_norm -%}
          {% render 'nb-testimonial-card', card: { 'quote': q, 'name': n, 'title': tt, 'location': loc, 'avatar': av, 'tags': tags_norm } %}
        {%- endfor -%}
      {%- endif -%}
    {%- else -%}
      {%- for block in section.blocks limit: limit -%}
        {%- assign q   = block.settings.quote    | default: '' -%}
        {%- assign n   = block.settings.name     | default: '' -%}
        {%- assign tt  = block.settings.title    | default: '' -%}
        {%- assign loc = block.settings.location | default: '' -%}
        {%- assign av  = block.settings.avatar -%}
        {%- assign tg  = block.settings.tags | default: '' -%}
        {%- if q != '' or n != '' -%}{% assign has_any = true %}{% endif -%}
        {%- assign tags_norm = tg | replace: ';', ',' | replace: ' ,', ',' | replace: ', ', ',' -%}
        {%- assign tag_bucket = tag_bucket | append: ',' | append: tags_norm -%}
        {% render 'nb-testimonial-card', card: { 'quote': q, 'name': n, 'title': tt, 'location': loc, 'avatar': av, 'tags': tags_norm } %}
      {%- endfor -%}
    {%- endif -%}
  </div>
  {%- endcapture -%}

  {%- assign tags_all = tag_bucket | split: ',' | uniq | sort -%}
  {%- assign tags_clean = '' -%}
  {%- for t in tags_all -%}
    {%- assign tt = t | strip -%}
    {%- if tt != '' -%}{% assign tags_clean = tags_clean | append: tt | append: '||' %}{%- endif -%}
  {%- endfor -%}
  {%- assign tags_list = tags_clean | split: '||' -%}

  {%- if section.settings.show_filter and tags_list.size > 0 -%}
  <nav class="nb-tchips" aria-label="Filter testimonials by tag" data-root="{{ section.id }}">
    <ul class="nb-tchips__list" data-chips>
      <li><button type="button" class="nb-chip is-active" data-filter="*">All</button></li>
      {%- for t in tags_list -%}
        <li><button type="button" class="nb-chip" data-filter="{{ t | handleize }}">{{ t }}</button></li>
      {%- endfor -%}
    </ul>
  </nav>
  {%- endif -%}

  {{ render_cards }}

</section>

{% javascript %}
(() => {
  const root   = document.currentScript.closest('.nb-testimonials');
  if (!root) return;
  const grid   = root.querySelector('[data-grid]');
  const chips  = root.querySelectorAll('[data-chips] .nb-chip');
  if (!grid || chips.length === 0) return;

  chips.forEach(chip => {
    chip.addEventListener('click', () => {
      chips.forEach(c => c.classList.remove('is-active'));
      chip.classList.add('is-active');
      const f = chip.getAttribute('data-filter');
      grid.querySelectorAll('.nb-tcard').forEach(card => {
        if (f === '*' ) { card.hidden = false; return; }
        const ds = (card.getAttribute('data-tags') || '').toLowerCase();
        card.hidden = ds.indexOf(f) === -1;
      });
    });
  });
})();
{% endjavascript %}

{% stylesheet %}
.nb-testimonials{ --t-accent: var(--nb-chocolate); --t-gap: clamp(14px,2.4vw,22px); --t-lines: 9; }
.nb-testimonials__head{ margin: 0 0 clamp(8px,1.8vw,16px); text-align:left; }
.nb-testimonials__title{ margin:0 0 6px; }
.nb-testimonials__dek{ margin:0; color:#516068; }

.nb-tchips{ position:relative; margin:8px 0 16px; }
.nb-tchips__list{ display:flex; gap:10px; overflow:auto; padding:6px 8px 8px; list-style:none; margin:0; scrollbar-width:none; }
.nb-tchips__list::-webkit-scrollbar{ display:none; }
.nb-tchips::before,.nb-tchips::after{ content:""; position:absolute; top:0; bottom:0; width:28px; pointer-events:none; }
.nb-tchips::before{ left:0; background:linear-gradient(90deg,#fff,rgba(255,255,255,0)); }
.nb-tchips::after{ right:0; background:linear-gradient(270deg,#fff,rgba(255,255,255,0)); }
.nb-chip{ display:inline-block; padding:.5rem .75rem; border-radius:999px; background:#fff; border:1px solid rgba(0,0,0,.08); box-shadow:0 4px 12px rgba(0,0,0,.05); }
.nb-chip.is-active{ background:#f6faf9; border-color:rgba(0,0,0,.06); font-weight:600; }

.nb-tgrid{
  display:grid;
  gap: var(--t-gap);
  grid-template-columns: repeat(auto-fit, minmax(min(320px,100%), 1fr));
  align-items: stretch;
}

/* Card */
.nb-tcard{
  position:relative; background:#fff; border:1px solid #e8ecef; border-radius:18px;
  box-shadow:0 10px 22px rgba(0,0,0,.06); padding:16px 16px 14px 18px;
  transition:transform .18s ease, box-shadow .18s ease;
}
.nb-tcard:hover{ transform:translateY(-2px); box-shadow:0 14px 28px rgba(0,0,0,.08); }
.nb-tcard__accent{ position:absolute; left:-1px; top:-1px; bottom:-1px; width:6px; border-radius:18px 0 0 18px;
  background:linear-gradient(180deg, var(--t-accent), color-mix(in oklab, var(--t-accent), #000 14%)); }
.nb-tcard__quote{ margin:0 0 12px; display:-webkit-box; -webkit-line-clamp: var(--t-lines); -webkit-box-orient: vertical; overflow:hidden; }
.nb-tcard__meta{ display:flex; gap:10px; align-items:flex-start; }
.nb-tcard__avatar{ flex:0 0 auto; width:36px; height:36px; border-radius:50%; overflow:hidden; background:#f3f5f4; }
.nb-tcard__avatar-img{ width:100%; height:100%; object-fit:cover; display:block; }
.nb-tcard__who{ line-height:1.25; }
.nb-tcard__name{ font-weight:700; }
.nb-tcard__title,.nb-tcard__loc{ color:#55656c; font-size:.92em; }
{% endstylesheet %}

{% schema %}
{
  "name": "Testimonials",
  "class": "section-wrapper nb-testimonials-wrap",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "What our clients say" },
    { "type": "text", "id": "subheading", "label": "Subheading", "default": "-" },
    { "type": "select", "id": "source", "label": "Source", "options": [
      { "value": "blocks", "label": "Manual (blocks)" },
      { "value": "metaobject", "label": "Metaobject: nb_testimonial" }
    ], "default": "blocks" },
    { "type": "range", "id": "limit", "label": "Max items", "min": 1, "max": 60, "step": 1, "default": 12 },
    { "type": "checkbox", "id": "show_filter", "label": "Show filter chips", "default": true },
    { "type": "color_scheme", "id": "color_scheme", "label": "Color scheme", "default": "scheme-1" },
    { "type": "header", "content": "Padding" },
    { "type": "range", "id": "padding-block-start", "label": "Top", "min": 0, "max": 100, "step": 1, "unit": "px", "default": 0 },
    { "type": "range", "id": "padding-block-end", "label": "Bottom", "min": 0, "max": 100, "step": 1, "unit": "px", "default": 0 }
  ],
  "blocks": [
    {
      "type": "item",
      "name": "Testimonial",
      "settings": [
        { "type": "textarea", "id": "quote", "label": "Quote", "default": "“This work helped me get clear, make braver choices, and feel more alive in daily life.”" },
        { "type": "text", "id": "name", "label": "Name", "default": "Client name" },
        { "type": "text", "id": "title", "label": "Title / descriptor", "default": "Founder" },
        { "type": "text", "id": "location", "label": "Location", "default": "London, UK" },
        { "type": "image_picker", "id": "avatar", "label": "Avatar (optional)" },
        { "type": "text", "id": "tags", "label": "Tags (comma separated)", "default": "" }
      ]
    }
  ],
  "presets": [{ "name": "Testimonials (grid)" }]
}
{% endschema %}
