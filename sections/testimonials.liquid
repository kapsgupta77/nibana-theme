{% comment %}
Testimonials — grid or slider
- Source: manual blocks OR metaobject "nb_testimonial"
- Cards: uses 'nb-testimonial-card' snippet
{% endcomment %}

<section id="nb-ts-{{ section.id }}" class="nb-testimonials tone-pebble">
  {%- liquid
    assign heading   = section.settings.heading    | default: 'Testimonials'
    assign sub       = section.settings.subheading | default: '-'

    assign show_sub  = false
    if sub != '-' and sub != ''
      assign show_sub = true
    endif

    assign source    = section.settings.source     | default: 'blocks'
    assign limit     = section.settings.limit      | default: 12

    assign carousel  = section.settings.carousel   | default: false
    assign per_view  = section.settings.per_view   | default: 3

    assign cta_label = section.settings.cta_label  | default: 'View all'
    assign cta_link  = section.settings.cta_link   | default: '/pages/testimonial'
  -%}

  <div class="nb-shell nb-testimonials__container">

    {%- if heading != blank or show_sub -%}
      <header class="nb-testimonials__head">
        {%- if heading != blank -%}
          <h1 class="nb-h2 nb-testimonials__title">{{ heading }}</h1>
        {%- endif -%}
        {%- if show_sub -%}
          <p class="nb-testimonials__dek">{{ sub }}</p>
        {%- endif -%}
      </header>
    {%- endif -%}

    {%- comment -%} Build cards-only markup once {%- endcomment -%}
    {%- capture cards_only -%}
      {%- if source == 'metaobject' -%}
        {%- assign mo = shop.metaobjects['nb_testimonial'] -%}
        {%- if mo and mo.values and mo.values.size > 0 -%}
          {%- for m in mo.values limit: limit -%}
            {%- liquid
              assign q   = m.quote
              assign n   = m.name     | default: ''
              assign tt  = m.title    | default: ''
              assign loc = m.location | default: ''
              assign av  = m.avatar
              assign tg  = m.tags | join: ',' | default: ''
            -%}
            {% render 'nb-testimonial-card',
              quote: q,
              name: n,
              title: tt,
              location: loc,
              avatar: av,
              tags: tg %}
          {%- endfor -%}
        {%- endif -%}
      {%- else -%}
        {%- for block in section.blocks limit: limit -%}
          {%- assign q   = block.settings.quote    | default: '' -%}
          {%- assign n   = block.settings.name     | default: '' -%}
          {%- assign tt  = block.settings.title    | default: '' -%}
          {%- assign loc = block.settings.location | default: '' -%}
          {%- assign av  = block.settings.avatar -%}
          {%- assign tg  = block.settings.tags     | default: '' -%}
          {% render 'nb-testimonial-card',
            quote: q,
            name: n,
            title: tt,
            location: loc,
            avatar: av,
            tags: tg %}
        {%- endfor -%}
      {%- endif -%}
    {%- endcapture -%}

    {%- comment -%} Render grid or slider {%- endcomment -%}
    {%- if carousel -%}
      <div class="nb-hstrip__viewport" data-viewport>
        <div class="nb-hstrip__strip" data-grid data-strip>
          {{ cards_only }}
        </div>
      </div>

      <div class="nb-hstrip__nav" data-nav>
        <button class="nb-hstrip__btn" type="button" aria-label="Previous" data-prev>‹</button>
        <div class="nb-hstrip__dots" aria-hidden="true" data-dots></div>
        <button class="nb-hstrip__btn" type="button" aria-label="Next" data-next>›</button>
      </div>

      {%- if cta_link != blank -%}
        <div class="nb-hstrip__cta">
          <a class="nb-cta nb-cta--md" href="{{ cta_link }}">{{ cta_label }}</a>
        </div>
      {%- endif -%}
    {%- else -%}
      <div class="nb-tgrid" data-grid>
        {{ cards_only }}
      </div>
    {%- endif -%}

  </div>
</section>

{% javascript %}
(() => {
  const sec = document.getElementById('shopify-section-{{ section.id }}');
  if (!sec) return;

  // Elements in YOUR current layout
  const scroller = sec.querySelector('.nb-tcarousel__track [data-grid]') || sec.querySelector('[data-grid]');
  const slides   = Array.from(scroller?.children || []);
  const nav      = sec.querySelector('[data-nav]');
  const dotsBox  = sec.querySelector('[data-dots]');
  const prevBtn  = sec.querySelector('[data-dir="-1"]');
  const nextBtn  = sec.querySelector('[data-dir="1"]');

  if (!scroller || !nav || !prevBtn || !nextBtn) return;

  // --- Helpers --------------------------------------------------------------
  const gapPx = () => {
    const cs = getComputedStyle(scroller);
    return parseFloat(cs.columnGap || cs.gap || 0) || 0;
  };

  const cardW = () => {
    const first = slides[0];
    if (!first) return scroller.clientWidth || 0;
    const rect = first.getBoundingClientRect();
    return rect.width + gapPx();
  };

  const perView = () => {
    const w = scroller.clientWidth || 0;
    const step = cardW() || 1;
    return Math.max(1, Math.round(w / step));
  };

  const pageCount = () => {
    const total = slides.length;
    const pv    = perView();
    return Math.max(1, Math.ceil(total / pv));
  };

  let pages  = pageCount();
  let active = 0;

  function goTo(i){
    const pv = perView();
    const x  = i * pv * cardW();
    try { scroller.scrollTo({ left: x, behavior: 'smooth' }); }
    catch { scroller.scrollLeft = x; }
  }

  function goBy(dir){
    const pv = perView();
    const x  = dir * pv * cardW();
    try { scroller.scrollBy({ left: x, behavior: 'smooth' }); }
    catch { scroller.scrollLeft += x; }
  }

  function buildDots(){
    if (!dotsBox) return;
    dotsBox.innerHTML = '';
    for (let i = 0; i < pages; i++){
      const dot = document.createElement('i');
      if (i === active) dot.classList.add('is-active');
      dot.addEventListener('click', () => goTo(i));
      dotsBox.appendChild(dot);
    }
  }

  function update(){
    const pv = perView();
    const step = pv * cardW() || 1;
    active = Math.max(0, Math.min(pages - 1, Math.round(scroller.scrollLeft / step)));

    // dots + buttons
    dotsBox?.querySelectorAll('i').forEach((d, i) => d.classList.toggle('is-active', i === active));
    nav.hidden       = pages <= 1;
    prevBtn.disabled = active <= 0;
    nextBtn.disabled = active >= pages - 1;
  }

  // Events
  prevBtn.addEventListener('click', (e) => { e.preventDefault(); e.stopPropagation(); goBy(-1); });
  nextBtn.addEventListener('click', (e) => { e.preventDefault(); e.stopPropagation(); goBy( 1); });

  scroller.addEventListener('scroll', () => requestAnimationFrame(update), { passive: true });

  const ro = new ResizeObserver(() => {
    const p = pageCount();
    if (p !== pages){ pages = p; buildDots(); }
    update();
  });
  ro.observe(scroller);

  // Init
  pages = pageCount();
  buildDots();
  update();
})();
{% endjavascript %}

{% stylesheet %}
/* Container */
.nb-testimonials__container{ max-width: var(--narrow-page-width, 1120px); margin: 0 auto; padding: 0 20px; }

/* Header */
.nb-testimonials__head{ text-align:center; margin: 0 0 clamp(12px, 2vw, 18px); }
.nb-testimonials__title{ margin:0 0 6px; color: var(--nb-ink, #1F2C2A); }
.nb-testimonials__dek{ margin:0; color:#55656c; }

/* Grid (non-slider) */
.nb-tgrid{ display:grid; gap: clamp(16px, 2.2vw, 26px); align-items: stretch; }
@media (min-width: 960px){ .nb-tgrid{ grid-template-columns: repeat(3, minmax(0,1fr)); } }
@media (min-width: 720px) and (max-width: 959.98px){ .nb-tgrid{ grid-template-columns: repeat(2, minmax(0,1fr)); } }
@media (max-width: 719.98px){ .nb-tgrid{ grid-template-columns: 1fr; } }

/* Horizontal strip for slider */
.nb-hstrip__viewport{ position:relative; overflow:hidden; }
.nb-hstrip__strip{
  display:grid;
  grid-auto-flow: column;
  grid-auto-columns: minmax(88%, 1fr); /* mobile */
  gap: 18px;
  scroll-snap-type: x mandatory;
  overflow-x: auto;
  padding: 4px 4px 8px;
  scrollbar-width: none;
}
.nb-hstrip__strip::-webkit-scrollbar{ display:none; }
.nb-hstrip__strip .nb-tcard{ scroll-snap-align:start; }

/* More columns on wider screens */
@media (min-width: 740px){
  .nb-hstrip__strip{ grid-auto-columns: minmax(48%, 1fr); }
}
@media (min-width: 1024px){
  .nb-hstrip__strip{ grid-auto-columns: minmax(calc(100% / {{ section.settings.per_view | default: 3 }}), 1fr); }
}

/* Nav & dots */
.nb-hstrip__nav{ display:flex; align-items:center; justify-content:center; gap:14px; margin:12px 0 0; }
.nb-hstrip__btn{
  width:42px; height:42px; border-radius:999px;
  border:1px solid rgba(0,0,0,.08); background:#fff;
  box-shadow:0 8px 18px rgba(0,0,0,.08);
  font-size:22px; line-height:1; cursor:pointer;
  pointer-events:auto; z-index:3;
}
.nb-hstrip__btn[disabled]{ opacity:.4; cursor:not-allowed; }
.nb-hstrip__dots{ display:flex; gap:8px; }
.nb-hstrip__dots i{ width:7px; height:7px; border-radius:999px; background:#cfd6d2; display:inline-block; }
.nb-hstrip__dots i.is-active{ background:#0C8A7B; }

/* CTA */
.nb-hstrip__cta{ display:flex; justify-content:center; margin:16px 0 0; }
.nb-hstrip__cta .nb-cta{
  background: var(--nb_teal, #0C8A7B) !important;
  color:#fff !important;
  border-color: transparent !important;
}
.nb-hstrip__cta .nb-cta:hover{
  background: color-mix(in oklab, var(--nb_teal, #0C8A7B), #000 8%) !important;
}
{% endstylesheet %}

{% schema %}
{
  "name": "Testimonials",
  "class": "section-wrapper nb-testimonials-wrap",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "Testimonials" },
    { "type": "text", "id": "subheading", "label": "Subheading", "default": "What our client's say" },

    { "type": "select", "id": "source", "label": "Source", "options": [
      { "value": "blocks",      "label": "Manual (blocks)" },
      { "value": "metaobject",  "label": "Metaobject: nb_testimonial" }
    ], "default": "metaobject" },

    { "type": "range", "id": "limit", "label": "Max items", "min": 1, "max": 60, "step": 1, "default": 12 },

    { "type": "header", "content": "Slider options" },
    { "type": "checkbox", "id": "carousel", "label": "Show as slider (horizontal scroll)", "default": true },
    { "type": "range", "id": "per_view", "label": "Cards per view (desktop)", "min": 1, "max": 3, "step": 1, "default": 3 },

    { "type": "text", "id": "cta_label", "label": "CTA label", "default": "View all" },
    { "type": "text", "id": "cta_link", "label": "CTA link", "default": "/pages/testimonial" },

    { "type": "color_scheme", "id": "color_scheme", "label": "Color scheme", "default": "scheme-1" },

    { "type": "header", "content": "Padding" },
    { "type": "range", "id": "padding-block-start", "label": "Top", "min": 0, "max": 100, "step": 1, "unit": "px", "default": 0 },
    { "type": "range", "id": "padding-block-end", "label": "Bottom", "min": 0, "max": 100, "step": 1, "unit": "px", "default": 0 }
  ],
  "blocks": [
    {
      "type": "testimonial",
      "name": "Testimonial",
      "settings": [
        { "type": "textarea", "id": "quote", "label": "Quote", "default": "“This work helped me get clear, make braver choices, and feel more alive in daily life.”" },
        { "type": "text", "id": "name", "label": "Name", "default": "Client name" },
        { "type": "text", "id": "title", "label": "Title / descriptor", "default": "Founder" },
        { "type": "text", "id": "location", "label": "Location", "default": "London, UK" },
        { "type": "image_picker", "id": "avatar", "label": "Avatar (optional)" },
        { "type": "text", "id": "tags", "label": "Tags (comma separated)", "default": "-" }
      ]
    }
  ],
  "presets": [{ "name": "Testimonials (grid/slider)" }]
}
{% endschema %}
